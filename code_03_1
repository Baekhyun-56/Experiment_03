#define HAVE_REMOTE
#define WIN32
#include "pcap.h"
#include <winsock.h>
#include <Winsock2.h> 
#include"remote-ext.h"
#include <ntddndis.h>
#pragma comment(lib, "E:\\Win_Pacp\\WpdPack_4_1_2\\WpdPack\\Lib\\Packet.lib")
#pragma comment(lib, "E:\\Win_Pacp\\WpdPack_4_1_2\\WpdPack\\Lib\\x64\\wpcap.lib")
#pragma comment(lib, "WS2_32.lib")

typedef struct ip_header {
	u_char ver_ihl; // Version (4 bits) + Internet header length(4 bits)
	u_char tos; // Type of service 
	u_short tlen; // Total length 
	u_short identification; // Identification
	u_short flags_fo;// Flags (3 bits) + Fragment offset(13bits);
	u_char ttl; // Time to live
	u_char proto; // Protocol
	u_short crc; // Header checksum
	u_char saddr[4]; // Source address
	u_char daddr[4]; // Destination address
	u_int op_pad; // Option + Padding
} ip_header;

typedef struct mac_header {
	u_char dest_addr[6];
	u_char src_addr[6];
	u_char type[2];
} mac_header;

/* prototype of the packet handler */
void packet_handler(u_char* param, const struct pcap_pkthdr* header, const u_char* pkt_data);
int main()
{
	pcap_if_t* alldevs;
	pcap_if_t* d;
	int inum;
	int i = 0;
	int res;
	pcap_t* adhandle;
	char errbuf[PCAP_ERRBUF_SIZE];
	u_int netmask;
	char packet_filter[] = "ip and udp";
	struct bpf_program fcode;
	
	/* Retrieve the device list */
	if (pcap_findalldevs(&alldevs, errbuf) == -1)
	{
		fprintf(stderr, "Error in pcap_findalldevs: %s\n", errbuf);
		exit(1);
	}

	/* Print the list */
	for (d = alldevs; d; d = d->next)
	{
		printf("%d. %s", ++i, d->name);
		if (d->description)
			printf(" (%s)\n", d->description);
		else
			printf(" (No description available)\n");
	}
	if (i == 0)
	{
		printf("\nNo interfaces found! Make sure WinPcap is installed.\n");
		return -1;
	}
	printf("Enter the interface number (1-%d):", i);
	scanf_s("%d", &inum);
	if (inum < 1 || inum > i) {
		printf("\nInterface number out of range.\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}
	/* Jump to the selected adapter */
	for (d = alldevs, i = 0; i < inum - 1; d = d->next, i++);

	/* Open the adapter */
	if ((adhandle = pcap_open(d->name, 65536,PCAP_OPENFLAG_PROMISCUOUS, 1000, NULL, errbuf)) == NULL) 
	{
		fprintf(stderr,"\nUnable to open the adapter. %s is not supported by WinPcap\n");

		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}
	if (d->addresses != NULL)
		/* Retrieve the mask of the first address of the interface */
		netmask = ((struct sockaddr_in*)(d->addresses->netmask))->sin_addr.S_un.S_addr;
	else
		/* If the interface is without addresses we suppose to be in a C class network */
		netmask = 0xffffff;

	//compile the filter
	if (pcap_compile(adhandle, &fcode, packet_filter, 1, netmask) < 0)
	{
		fprintf(stderr, "\nUnable to compile the packet filter. Check the syntax.\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}

	//set the filter
	if (pcap_setfilter(adhandle, &fcode) < 0)
	{
		fprintf(stderr, "\nError setting the filter.\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}

	printf("\nlistening on %s...\n", d->description);

	/* At this point, we don't need any more the device list. Free it */
	pcap_freealldevs(alldevs);

	/* start the capture */
	pcap_loop(adhandle, 0, packet_handler, NULL);

}

void packet_handler(u_char* param, const struct pcap_pkthdr* header, const u_char* pkt_data)
{
	struct tm* ltime;
	char timestr[16];
	ip_header* ih;
	mac_header* mh;
	u_int ip_len;
	u_short sport, dport;
	time_t local_tv_sec;

	int length = sizeof(mac_header) + sizeof(ip_header);
	for (int i = 0; i < length; i++) {
		printf("%02X ", pkt_data[i]);
		if ((i & 0xF) == 0xF)
			printf("\n");
	}
	printf("\n");

	printf("%.6ld len:%d\n", header->ts.tv_usec, header->len);
	if (header->len > 1024)
		printf("流量超出阈值！");

	mh = (mac_header*)pkt_data;
	printf("mac_header:\n");
	printf("\tdest_addr: ");
	for (int i = 0; i < 6; i++) {
		printf("%02X ", mh->dest_addr[i]);
	}
	printf("\n");
	printf("\tsrc_addr: ");
	for (int i = 0; i < 6; i++) {
		printf("%02X ", mh->src_addr[i]);
		printf("\n");
		printf("\ttype: %04X", ntohs(mh->type[i]));
		printf("\n");
	}

	/* retireve the position of the ip header */
	ih = (ip_header*)(pkt_data + sizeof(mac_header)); //length of ethernet header
	printf("ip_header\n");
	printf("\t%-10s: %02X\n", "ver_ihl", ih->ver_ihl);
	printf("\t%-10s: %02X\n", "tos", ih->tos);
	printf("\t%-10s: %04X\n", "tlen", ntohs(ih->tlen));
	printf("\t%-10s: %04X\n", "identification", ntohs(ih -> identification));
	printf("\t%-10s: %04X\n", "flags_fo", ntohs(ih->flags_fo));
	printf("\t%-10s: %02X\n", "ttl", ih->ttl);
	printf("\t%-10s: %02X\n", "proto", ih->proto);
	printf("\t%-10s: %04X\n", "crc", ntohs(ih->crc));
	printf("\t%-10s: %08X\n", "op_pad", ntohs(ih->op_pad));
	printf("\t%-10s: ", "saddr:");
	for (int i = 0; i < 4; i++) {
		printf("%02X ", ih->saddr[i]);
	}
	printf(" ");
	for (int i = 0; i < 4; i++) {
		printf("%d.", ih->saddr[i]);
	}
	printf("\n");
	printf("\t%-10s: ", "daddr");
	for (int i = 0; i < 4; i++) {
		printf("%02X ", ih->daddr[i]);
	}
	printf(" ");
	for (int i = 0; i < 4; i++) {
		printf("%d.", ih->daddr[i]);
	}
	printf("\n");
}


